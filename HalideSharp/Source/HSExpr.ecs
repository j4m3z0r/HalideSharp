#ecs;

includeFile("MagicMacros.ecs");

using System;
using System.CodeDom;
using System.Runtime.InteropServices;

namespace HalideSharp
{
    public partial class HSExpr : HSObject
    {
        public const string CppType = "Expr";
        
        region("Constructors") {
            internal HSExpr(IntPtr cppobj) : base()
            {
                _cppobj = cppobj;
            }

            [DllImport(Constants.LibName)]
            private static extern IntPtr Expr_New_Int(int i);
            public HSExpr(int i) : base()
            {
                _cppobj = Expr_New_Int(i);
            }

            [DllImport(Constants.LibName)]
            private static extern IntPtr Expr_New_Float(float f);
            public HSExpr(float f) : base()
            {
                _cppobj = Expr_New_Float(f);
            }
        }

        region("Implicit type converters") {
            public static implicit operator HSExpr(int i)
            {
                return new HSExpr(i);
            }

            public static implicit operator HSExpr(float f)
            {
                return new HSExpr(f);
            }
        }

        [DllImport(Constants.LibName)]
        private static extern void Expr_Delete(IntPtr obj);
        
        ~HSExpr()
        {
            ifdef("TRACE_DESTRUCTORS") {
                Console.WriteLine($"Destroying {this.GetType().Name}");
            }

            if (_cppobj != IntPtr.Zero)
            {
                Expr_Delete(_cppobj);
            }
        }

        [DllImport(Constants.LibName)]
        private static extern IntPtr Expr_ToString(IntPtr exp);

        [DllImport(Constants.LibC, EntryPoint = "free")]
        private static extern void Free(IntPtr p);
        
        public override string ToString()
        {
            var stringPtr = Expr_ToString(_cppobj);
            var result = Marshal.PtrToStringAnsi(stringPtr);
            Free(stringPtr);

            return result;
        }

        // HACK: returning false from both operator true and operator false should force us to never short-circuit,
        // meaning that && will always invoke operator&, which calls C++'s operator&& in the wrapper. In short, this
        // allows for the common (x && y) style conditionals.
        public static bool operator true(HSExpr e)
        {
            return false;
        }

        public static bool operator false(HSExpr e)
        {
            return false;
        }

    }
}
