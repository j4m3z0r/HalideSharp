#ecs;

includeFile("Indexer.ecs");

replace(DimensionFields => (Stride, Extent));

using System;
using System.Runtime.InteropServices;

// Execute the given macro with all variations of containing types specified.
define ExecMacroAllTypes($macro) {
    unroll(BufferType in BufferTypes) {
        $macro(BufferType);
    }
}

namespace HalideSharp
{
    internal class CppBuffer
    {

        region("2D constructors") {
            unroll (BufferType in BufferTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _New_IntInt)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(int width, int height);
                }
            }
        }

        region("3D constructors") {
            unroll (BufferType in BufferTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _New_IntIntInt)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(int width, int height, int channels);
                }
            }
        }
        
        region("3D constructors with data array") {
            unroll (BufferType in BufferTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _New_BytepIntIntInt)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(IntPtr dataP, int width, int height, int channels);
                }
            }
        }

        region("3D make_interleaved with data array") {
            unroll (BufferType in BufferTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _MakeInterleaved_, BufferType, pIntIntInt)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(IntPtr dataP, int width, int height, int channels);
                }
            }
        }

        region("destructors") {
            unroll(BufferType in BufferTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _Delete)) {
                    [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr obj);
                }
            }
        }

        region("2D indexers") {
            region("int indexers") {
                unroll((BufferType, _) in BufferAndNativeTypes) {
                    replacePP(MethodName => concatId(BufferOf, BufferType, _GetVal_IntInt)) {
                        [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr obj, int x, int y, IntPtr result);
                    }
                    replacePP(MethodName => concatId(BufferOf, BufferType, _SetVal_IntInt, BufferType, P)) {
                        [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr obj, int x, int y, IntPtr val);
                    }
                }
            }

            GenIndexerImports2D(Buffer);
        }
        
        region("3D indexers") {
            region("int indexers") {
                unroll(BufferType in BufferTypes) {
                    replacePP(MethodName => concatId(BufferOf, BufferType, _GetVal_IntIntInt)) {
                        [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr obj, int x, int y, int z, IntPtr result);
                    }
                    replacePP(MethodName => concatId(BufferOf, BufferType, _SetVal_IntIntInt, BufferType, P)) {
                        [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr obj, int x, int y, int z, IntPtr val);
                    }
                }
            }

            GenIndexerImports3D(Buffer);
        }

        region("ToArray implementations") {
            unroll(BufferType in BufferTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _CopyToArray_, BufferType, p)) {
                    [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr self, IntPtr resultPointer);
                }
            }
        }
        
        define SetMin($BufferType) {
            replace(MethodName => concatId(BufferOf, $BufferType, _SetMin, _IntInt)) {
                [DllImport(Constants.LibName)] public static extern int MethodName(IntPtr obj, int x, int y);
            }
        }
        ExecMacroAllTypes(SetMin);

        region("Getters") {
            define Getters($BufferType) {
                unroll((DIMENSION) in (Width, Height, Channels, Top, Bottom, Left, Right)) {
                    replace(MethodName => concatId(BufferOf, $BufferType, _, DIMENSION)) {
                        [DllImport(Constants.LibName)] public static extern int MethodName(IntPtr obj);
                    }
                }
            }
            ExecMacroAllTypes(Getters);
        }

        region("Dimension accessors") {
            define Dimension($BufferType) {
                unroll(FieldName in DimensionFields) {
                    replace(MethodName => concatId(BufferOf, $BufferType, _GetDimension, FieldName, _Int)) {
                        [DllImport(Constants.LibName)] internal static extern int MethodName(IntPtr obj, int d);
                    }
                }
            }
            ExecMacroAllTypes(Dimension);
        }
        
        [DllImport(Constants.LibName)] public static extern IntPtr BufferOfByte_LoadImage_String([MarshalAs(Constants.StringType)] string filename);
        
        [DllImport(Constants.LibName)] public static extern IntPtr BufferOfByte_SaveImage_String(IntPtr buffer, [MarshalAs(Constants.StringType)] string filename);

        define CopyToHost($BufferType) {
            replace(MethodName => concatId(BufferOf, $BufferType, _CopyToHost)) {
                [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr self);
            }
        }
        ExecMacroAllTypes(CopyToHost);
    }
    
    public class HSBuffer<T> : HSObject
        where T: struct
    {
        // The HSBufferDimensionList class is just a proxy to give us way to access the dimensions of the buffer with an indexer.
        private HSBufferDimensionList<T> _dimensions;
        public HSBufferDimensionList<T> Dim => _dimensions;
        private byte[] _hostBuffer = null;
        private GCHandle _hostBufferHandle;

        private void CheckType()
        {
            unroll((_, NativeType) in BufferAndNativeTypes) {
                if(typeof(T) == typeof(NativeType)) {
                    return;
                }
            }
            throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
        }
        
        public HSBuffer(int width, int height)
        {
            _dimensions = new HSBufferDimensionList<T>(this);
            unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _New_IntInt)) {
                    if(typeof(T) == typeof(NativeType)) { _cppobj = CppBuffer.MethodName(width, height); return; }
                }
            }
            throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
        }
        
        public HSBuffer(int width, int height, int channels)
        {
            _dimensions = new HSBufferDimensionList<T>(this);
            unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _New_IntIntInt)) {
                    if(typeof(T) == typeof(NativeType)) { _cppobj = CppBuffer.MethodName(width, height, channels); return; }
                }
            }
            throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
        }

        // As of right now, we assume that host applications pass image data around as byte arrays.
        public HSBuffer(byte[] data, int width, int height, int channels, bool interleaved=false)
        {
            // According to https://stackoverflow.com/questions/39779149/initializing-halide-buffer-in-c, Buffers don't maintain
            // their own copy of the data, so we hold a reference to the passed data, pin it, and release the handle in the
            // destructor.
            _dimensions = new HSBufferDimensionList<T>(this);
            _hostBuffer = data;
            _hostBufferHandle = GCHandle.Alloc(data, GCHandleType.Pinned);

            unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                if(typeof(T) == typeof(NativeType)) {
                    if(interleaved)
                    {
                        replacePP(MethodName => concatId(BufferOf, BufferType, _MakeInterleaved_, BufferType, pIntIntInt)) {
                            _cppobj = CppBuffer.MethodName(HSUtil.CArg(_hostBufferHandle), HSUtil.CArg(width), HSUtil.CArg(height), HSUtil.CArg(channels));
                            return;
                        }
                    }
                    else
                    {
                        replacePP(MethodName => concatId(BufferOf, BufferType, _New_BytepIntIntInt)) {
                            _cppobj = CppBuffer.MethodName(HSUtil.CArg(_hostBufferHandle), HSUtil.CArg(width), HSUtil.CArg(height), HSUtil.CArg(channels));
                            return;
                        }
                    }
                }
            }

            throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
        }
       
        // For the time being, we only accept byte[]s as input, which is about as close as we get to a void * in C#.
        public static HSBuffer<T> MakeInterleaved(byte[] data, int width, int height, int channels)
        {
            return new HSBuffer<T>(data, width, height, channels, true);
        }

        internal HSBuffer(IntPtr cppobj)
        {
            _dimensions = new HSBufferDimensionList<T>(this);
            CheckType();
            _cppobj = cppobj;
        }

        public static HSBuffer<T> LoadImage(string filename)
        {
            if (typeof(T) == typeof(byte))
            {
                return new HSBuffer<T>(CppBuffer.BufferOfByte_LoadImage_String(filename));
            }
            else
            {
                throw new NotImplementedException($"Can't load images to buffer of type {typeof(T)}");
            }
        }

        public void SaveImage(string filename)
        {
            if (typeof(T) == typeof(byte))
            {
                CppBuffer.BufferOfByte_SaveImage_String(HSUtil.CArg(this), HSUtil.CArg(filename));
            }
            else
            {
                throw new NotImplementedException($"Can't save images to buffer of type {typeof(T)}");
            }
        }

        ~HSBuffer()
        {
            CheckType();
            if (_cppobj == IntPtr.Zero)
            {
                return;
            }

            if(_hostBuffer != null) {
                _hostBufferHandle.Free();
            }

            unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                replacePP(MethodName => concatId(BufferOf, BufferType, _Delete)) {
                    if(typeof(T) == (typeof(NativeType))) { CppBuffer.MethodName(_cppobj); return; }
                }
            }
            throw new NotImplementedException($"No destructor for type {typeof(T)}");
        }

        public T GetVal(int x, int y)
        {
            // Here's what's going on with this piece of pure artisinal C#: over in C++ land, Halide::Buffer is a
            // templated type. However, since we need to route calls to that templated C++ code via a C interface,
            // we have a different version of the C wrapper function for each type we're interested in -- hence the
            // test against typeof(T). However, the real trick is in fooling C# into letting C/C++ fill in the
            // result value. We can't use unsafe & fixed, since T is a generic, and you can't have a generic type
            // for fixed(). GCHandle will do the trick, but there's one final wrinkle: if you use GCHandle on a
            // non-object type (which we have constrained T to be), it won't pass the address of the original value
            // but will instead make a copy of the value and give you the address of that copy. At that point, C++
            // will fill in the correct value, and C# will promptly throw it away. To workaround this, we create
            // a temporary array of Ts of length 1, take the address of the array, then return the first element.
            var result = new T[1];
            var resultHandle = GCHandle.Alloc(result, GCHandleType.Pinned);

            try
            {
                unroll((BufferType, NativeType) in BufferAndNativeTypes)
                {
                    replacePP(MethodName => concatId(BufferOf, BufferType, _GetVal_IntInt)) {
                        if(typeof(T) == typeof(NativeType)) { CppBuffer.MethodName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(resultHandle)); return result[0]; }
                    }
                }
                throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
            }
            finally
            {
                resultHandle.Free();
            }
        }

        public void SetVal(int x, int y, T val)
        {
            var tmp = new T[1];
            tmp[0] = val;
            var tmpHandle = GCHandle.Alloc(tmp, GCHandleType.Pinned);
            try
            {
                unroll((BufferType, NativeType) in BufferAndNativeTypes)
                {
                    replacePP(MethodName => concatId(BufferOf, BufferType, _SetVal_IntInt, BufferType, P)) {
                        if(typeof(T) == typeof(NativeType)) { CppBuffer.MethodName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(tmpHandle)); return; }
                    }
                }
                throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
            }
            finally
            {
                tmpHandle.Free();
            }
        }

        public T GetVal(int x, int y, int z)
        {
            // See above
            var result = new T[1];
            var resultHandle = GCHandle.Alloc(result, GCHandleType.Pinned);

            try
            {
                unroll((BufferType, NativeType) in BufferAndNativeTypes)
                {
                    replacePP(MethodName => concatId(BufferOf, BufferType, _GetVal_IntIntInt)) {
                        if(typeof(T) == typeof(NativeType)) { CppBuffer.MethodName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z), HSUtil.CArg(resultHandle)); return result[0]; }
                    }
                }
                throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
            }
            finally
            {
                resultHandle.Free();
            }
        }

        public void SetVal(int x, int y, int z, T val)
        {
            var tmp = new T[1];
            tmp[0] = val;
            var tmpHandle = GCHandle.Alloc(tmp, GCHandleType.Pinned);
            try
            {
                unroll((BufferType, NativeType) in BufferAndNativeTypes)
                {
                    replacePP(MethodName => concatId(BufferOf, BufferType, _SetVal_IntIntInt, BufferType, P)) {
                        if(typeof(T) == typeof(NativeType)) { CppBuffer.MethodName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z), HSUtil.CArg(tmpHandle)); return; }
                    }
                }
                throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
            }
            finally
            {
                tmpHandle.Free();
            }
        }
            

        public T this[int x, int y]
        {
            get => GetVal(x, y);
            set => SetVal(x, y, value);
        }
        public T this[int x, int y, int z]
        {
            get => GetVal(x, y, z);
            set => SetVal(x, y, z, value);
        }

        region("2D indexers") {
            define BufferIndexer2D($T1, $T2) {
                Indexer2D(Buffer, $T1, $T2);
            }
            ExecMacro2D(BufferIndexer2D);
        }

        region("3D indexers") {
            define BufferIndexer3D($T1, $T2, $T3) {
                Indexer3D(Buffer, $T1, $T2, $T3);
            }
            ExecMacro3D(BufferIndexer3D);
        }

        region("ToArray") {
            public T[] ToArray()
            {
                // Calculate how large the array needs to be
                var nrVals = Width * Height * Channels;
                var result = new T[nrVals];
                var resultHandle = GCHandle.Alloc(result, GCHandleType.Pinned);
                try
                {
                    unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                        if(typeof(T) == typeof(NativeType)) {
                            replacePP(MethodName => concatId(BufferOf, BufferType, _CopyToArray_, BufferType, p)) {
                                CppBuffer.MethodName(HSUtil.CArg(this), HSUtil.CArg(resultHandle));
                                return result;
                            }
                        }
                    }
                    throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
                }
                finally
                {
                    resultHandle.Free();
                }
            }
        }
        
        public void SetMin(int x, int y)
        {
            unroll((BufferType, NativeType) in BufferAndNativeTypes)
            {
                replacePP(MethodName => concatId(BufferOf, BufferType, _, SetMin, _IntInt)) {
                    if(typeof(T) == typeof(NativeType)) { CppBuffer.MethodName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y)); return; }
                }
            }
            throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
        }

        region("simple int accessors") {
            unroll (FieldName in (Width, Height, Channels, Top, Bottom, Left, Right)) {
                public int FieldName
                {
                    get
                    {
                        unroll ((BufferType, NativeType) in BufferAndNativeTypes) {
                            replacePP(MethodName => concatId(BufferOf, BufferType, _, FieldName)) {
                                if(typeof(T) == typeof(NativeType)) { return CppBuffer.MethodName(HSUtil.CArg(this)); }
                            }
                        }
                        throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
                    }
                }
            }
        }

        region("Dimensions") {
            internal HSBufferDimension<T> GetDimension(int d) {
                return new HSBufferDimension<T>(this, d);
            }

            unroll(FieldName in DimensionFields) {
                replace(MethodName => concatId(GetDimension, FieldName)) {
                    internal int MethodName(int dim) {
                        unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                            replacePP(ImplName => concatId(BufferOf, BufferType, _GetDimension, FieldName, _Int)) {
                                if(typeof(T) == typeof(NativeType)) { return CppBuffer.ImplName(HSUtil.CArg(this), HSUtil.CArg(dim)); }
                            }
                        }
                        throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
                    }
                }
            }
        }

        public void CopyToHost()
        {
            unroll((BufferType, NativeType) in BufferAndNativeTypes)
            {
                replacePP(MethodName => concatId(BufferOf, BufferType, _CopyToHost)) {
                    if(typeof(T) == typeof(NativeType)) { CppBuffer.MethodName(HSUtil.CArg(this)); return; }
                }
            }
            throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
        }
    }
}
