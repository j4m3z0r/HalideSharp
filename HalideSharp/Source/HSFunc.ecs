#ecs;

includeFile("Indexer.ecs");

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace HalideSharp
{
    public class HSFunc : HSObject
    {
        [DllImport(Constants.LibName)]
        private static extern IntPtr Func_New_String([MarshalAs(Constants.StringType)] string name);
        
        public HSFunc(string name) : base()
        {
            _cppobj = Func_New_String(name);
        }

        internal HSFunc(IntPtr f) : base()
        {
            _cppobj = f;
        }
        
        [DllImport(Constants.LibName)]
        private static extern void Func_Delete(IntPtr obj);
        
        ~HSFunc() {
            ifdef("TRACE_DESTRUCTORS") {
                Console.WriteLine($"Destroying {this.GetType().Name}");
            }

            if (_cppobj != IntPtr.Zero)
            {
                Func_Delete(_cppobj);
            }
        }

        region("1D indexers") {
            define Indexer1D($T1) {
                replacePP(GetterName => concatId(Func, _GetExpr_, $T1)) {
                    replacePP(SetterName => concatId(Func, _SetExpr_, $T1, Expr)) {

                        [DllImport(Constants.LibName)] public static extern IntPtr GetterName(IntPtr obj, IntPtr x);
                        [DllImport(Constants.LibName)] public static extern void SetterName(IntPtr func, IntPtr x, IntPtr e);

                        replacePP(arg1 => concatId(HS, $T1)) {
                            public HSExpr this[arg1 x]
                            {
                                get {
                                    var result = new HSExpr(GetterName(HSUtil.CArg(this), HSUtil.CArg(x)));
                                    result.AddRef(this, x);
                                    return result;
                                }
                                set {
                                    AddRef(x, value);
                                    SetterName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(value));
                                }
                            }
                        }
                    }
                }
            }
            ExecMacro1D(Indexer1D);
        }

        region("2D indexers") {
            define Indexer2D($T1, $T2) {
                replacePP(GetterName => concatId(Func, _GetExpr_, $T1, $T2),
                          SetterName => concatId(Func, _SetExpr_, $T1, $T2, Expr),
                          carg1 => CTypeForArg($T1),
                          carg2 => CTypeForArg($T2),
                          csarg1 => CSTypeForArg($T1),
                          csarg2 => CSTypeForArg($T2)) {

                [DllImport(Constants.LibName)] public static extern IntPtr GetterName(IntPtr obj, carg1 x, carg2 y);
                [DllImport(Constants.LibName)] public static extern void SetterName(IntPtr func, carg1 x, carg2 y, IntPtr e);

                    public HSExpr this[csarg1 x, csarg2 y]
                    {
                        get {
                            var result = new HSExpr(GetterName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y)));
                            result.AddRef(this, x, y);
                            return result;
                        }
                        set {
                            AddRef(x, y, value);
                            SetterName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(value));
                        }
                    }
                }
            }
            ExecMacro2D(Indexer2D);
        }

        region("3D indexers") {
            define Indexer3D($T1, $T2, $T3) {
                replacePP(GetterName => concatId(Func, _GetExpr_, $T1, $T2, $T3),
                          SetterName => concatId(Func, _SetExpr_, $T1, $T2, $T3, Expr),
                          carg1 => CTypeForArg($T1),
                          carg2 => CTypeForArg($T2),
                          carg3 => CTypeForArg($T3),
                          csarg1 => CSTypeForArg($T1),
                          csarg2 => CSTypeForArg($T2),
                          csarg3 => CSTypeForArg($T3)) {

                    [DllImport(Constants.LibName)] public static extern IntPtr GetterName(IntPtr obj, carg1 x, carg2 y, carg3 z);
                    [DllImport(Constants.LibName)] public static extern void SetterName(IntPtr func, carg1 x, carg2 y, carg3 z, IntPtr e);

                    public HSExpr this[csarg1 x, csarg2 y, csarg3 z]
                    {
                        get {
                            var result = new HSExpr(GetterName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z)));
                            result.AddRef(this, x, y, z);
                            return result;
                        }
                        set {
                            AddRef(x, y, z, value);
                            SetterName(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z), HSUtil.CArg(value));
                        }
                    }
                }
            }
            ExecMacro3D(Indexer3D);
        }

        region("Realize to pre-allocated buffer") {
            unroll (BufferType in BufferTypes) {
                replacePP(MethodName => concatId(Func_Realize_BufferOf, BufferType)) {
                    [DllImport(Constants.LibName)]
                    private static extern IntPtr MethodName(IntPtr func, IntPtr buff);
                }
            }

            public HSBuffer<T> Realize<T>(HSBuffer<T> buffer) where T : struct
            {
                unroll((BufferType, NativeType) in (BufferAndNativeTypes)) {
                    replacePP(MethodName => concatId(Func_Realize_BufferOf, BufferType)) {
                        if(typeof(T) == typeof(NativeType)) { return new HSBuffer<T>(MethodName(HSUtil.CArg(this), HSUtil.CArg(buffer))); }
                    }
                }
                throw new NotImplementedException($"Cannot realize to buffer of type {typeof(T)}");
            }
        }

        region("Realize to new buffer, 2D") {
            unroll (BufferType in BufferTypes) {
                replacePP(MethodName => concatId(Func_RealizeToBufferOf, BufferType, _IntInt)) {
                    [DllImport(Constants.LibName)]
                    private static extern IntPtr MethodName(IntPtr func, int width, int height);
                }
            }
            
            public HSBuffer<T> Realize<T>(int width, int height) where T : struct
            {
                unroll((BufferType, NativeType) in (BufferAndNativeTypes)) {
                    replacePP(MethodName => concatId(Func_RealizeToBufferOf, BufferType, _IntInt)) {
                        if(typeof(T) == typeof(NativeType)) { return new HSBuffer<T>(MethodName(HSUtil.CArg(this), HSUtil.CArg(width), HSUtil.CArg(height))); }
                    }
                }
                throw new NotImplementedException($"Cannot realize to buffer of type {typeof(T)}");
            }
        }
        
        region("Realize to new buffer, 3D") {
            unroll (BufferType in BufferTypes) {
                replacePP(MethodName => concatId(Func_RealizeToBufferOf, BufferType, _IntIntInt)) {
                    [DllImport(Constants.LibName)]
                    private static extern IntPtr MethodName(IntPtr func, int width, int height, int channels);
                }
            }
            
            public HSBuffer<T> Realize<T>(int width, int height, int channels) where T : struct
            {
                unroll((BufferType, NativeType) in (BufferAndNativeTypes)) {
                    replacePP(MethodName => concatId(Func_RealizeToBufferOf, BufferType, _IntIntInt)) {
                        if(typeof(T) == typeof(NativeType)) { return new HSBuffer<T>(MethodName(HSUtil.CArg(this), HSUtil.CArg(width), HSUtil.CArg(height), HSUtil.CArg(channels))); }
                    }
                }
                throw new NotImplementedException($"Cannot realize to buffer of type {typeof(T)}");
            }
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_TraceStores(IntPtr func);
        
        public void TraceStores()
        {
            Func_TraceStores(HSUtil.CArg(this));
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_Parallel_Var(IntPtr func, IntPtr v);
        
        public void Parallel(HSVar v)
        {
            AddRef(v);
            Func_Parallel_Var(HSUtil.CArg(this), HSUtil.CArg(v));
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_CompileToLoweredStmt_StringOutputformat(IntPtr func,
            [MarshalAs(Constants.StringType)] string filename, HSOutputFormat format);
        
        public void CompileToLoweredStmt(string filename, HSOutputFormat format)
        {
            Func_CompileToLoweredStmt_StringOutputformat(HSUtil.CArg(this), HSUtil.CArg(filename), HSUtil.CArg(format));
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_PrintLoopNest(IntPtr func);

        public void PrintLoopNest()
        {
            Func_PrintLoopNest(HSUtil.CArg(this));
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_Reorder_Varargs(IntPtr func, int nrVariables, IntPtr[] vars);

        public HSFunc Reorder(params HSVar[] vars)
        {
            var varPointers = new IntPtr[vars.Length];
            for (var i = 0; i < vars.Length; i++)
            {
                AddRef(vars[i]);
                varPointers[i] = vars[i]._cppobj;
            }
            
            Func_Reorder_Varargs(HSUtil.CArg(this), vars.Length, varPointers);
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_ReorderStorage_Varargs(IntPtr func, int nrVariables, IntPtr[] vars);

        public HSFunc ReorderStorage(params HSVar[] vars)
        {
            var varPointers = new IntPtr[vars.Length];
            for (var i = 0; i < vars.Length; i++)
            {
                AddRef(vars[i]);
                varPointers[i] = vars[i]._cppobj;
            }
            
            Func_ReorderStorage_Varargs(HSUtil.CArg(this), vars.Length, varPointers);
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_Split_VarVarVarInt(IntPtr func, IntPtr origVar, IntPtr var1, IntPtr var2, int factor);

        public HSFunc Split(HSVar origVar, HSVar var1, HSVar var2, int factor)
        {
            AddRef(origVar, var1, var2);
            Func_Split_VarVarVarInt(HSUtil.CArg(this), HSUtil.CArg(origVar), HSUtil.CArg(var1), HSUtil.CArg(var2), HSUtil.CArg(factor));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_Fuse_VarVarVar(IntPtr func, IntPtr var1, IntPtr var2, IntPtr fused);

        public HSFunc Fuse(HSVar var1, HSVar var2, HSVar fused)
        {
            AddRef(var1, var2, fused);
            Func_Fuse_VarVarVar(HSUtil.CArg(this), HSUtil.CArg(var1), HSUtil.CArg(var2), HSUtil.CArg(fused));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_Vectorize_Var(IntPtr func, IntPtr var1);

        public HSFunc Vectorize(HSVar var1)
        {
            AddRef(var1);
            Func_Vectorize_Var(HSUtil.CArg(this), HSUtil.CArg(var1));
            return this;
        }
        
        [DllImport(Constants.LibName)]
        private static extern void Func_Vectorize_VarInt(IntPtr func, IntPtr var1, int factor);

        public HSFunc Vectorize(HSVar var1, int factor)
        {
            AddRef(var1);
            Func_Vectorize_VarInt(HSUtil.CArg(this), HSUtil.CArg(var1), HSUtil.CArg(factor));
            return this;
        }
        
        [DllImport(Constants.LibName)]
        private static extern void Func_Unroll_Var(IntPtr func, IntPtr var1);

        public void Unroll(HSVar var1)
        {
            AddRef(var1);
            Func_Unroll_Var(HSUtil.CArg(this), HSUtil.CArg(var1));
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_Tile_VarVarVarVarVarVarIntInt(IntPtr func, IntPtr x, IntPtr y, IntPtr xo, IntPtr yo, IntPtr xi,
            IntPtr yi, int xfactor, int yfactor);

        public HSFunc Tile(HSVar x, HSVar y, HSVar xo, HSVar yo, HSVar xi, HSVar yi, int xfactor, int yfactor)
        {
            AddRef(x, y, xo, yo, xi, yi);
            Func_Tile_VarVarVarVarVarVarIntInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(xo), HSUtil.CArg(yo), HSUtil.CArg(xi), HSUtil.CArg(yi), HSUtil.CArg(xfactor), HSUtil.CArg(yfactor));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_ComputeRoot(IntPtr func);

        public HSFunc ComputeRoot()
        {
            Func_ComputeRoot(HSUtil.CArg(this));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_ComputeAt_FuncVar(IntPtr self, IntPtr func, IntPtr v);

        public HSFunc ComputeAt(HSFunc f, HSVar v)
        {
            AddRef(f, v);
            Func_ComputeAt_FuncVar(HSUtil.CArg(this), HSUtil.CArg(f), HSUtil.CArg(v));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_StoreRoot(IntPtr self);

        public HSFunc StoreRoot()
        {
            Func_StoreRoot(HSUtil.CArg(this));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_StoreAt_FuncVar(IntPtr self, IntPtr func, IntPtr v);

        public HSFunc StoreAt(HSFunc f, HSVar v)
        {
            AddRef(f, v);
            Func_StoreAt_FuncVar(HSUtil.CArg(this), HSUtil.CArg(f), HSUtil.CArg(v));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_CompileJit(IntPtr self);
        public HSFunc CompileJit()
        {
            Func_CompileJit(HSUtil.CArg(this));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_CompileJit_Target(IntPtr self, IntPtr target);
        public HSFunc CompileJit(HSTarget target)
        {
            AddRef(target);
            Func_CompileJit_Target(HSUtil.CArg(this), HSUtil.CArg(target));
            return this;
        }
        
        [DllImport(Constants.LibName)]
        private static extern void Func_CompileToFile_StringIntArrayOfArgumentStringTarget(
            IntPtr func,
            [MarshalAs(Constants.StringType)] string prefix,
            int nrArguments,
            IntPtr[] arguments,
            [MarshalAs(Constants.StringType)] string functionName,
            IntPtr target);
            
        public void CompileToFile(string prefix, List<HSArgument> arguments, string functionName, HSTarget target=null)
        {
            var objList = new IntPtr[arguments.Count];
            for(var i = 0; i < arguments.Count; i++)
            {
                objList[i] = HSUtil.CArg(arguments[i]);
            }
            
            Func_CompileToFile_StringIntArrayOfArgumentStringTarget(
                HSUtil.CArg(this),
                prefix,
                arguments.Count,
                objList,
                functionName,
                HSUtil.CArg(target));
        }
            

        [DllImport(Constants.LibName)]
        private static extern void Func_Bound(IntPtr self, IntPtr v, int min, int max);
        public HSFunc Bound(HSVar v, int min, int max)
        {
            AddRef(v);
            Func_Bound(HSUtil.CArg(this), HSUtil.CArg(v), HSUtil.CArg(min), HSUtil.CArg(max));
            return this;
        }

        // Looking at the test suite, it seems that sizes are always ints, rather than generic expressions.
        // We make that simplifying assumption here for the time being.
        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarVarInt(IntPtr self, IntPtr x, IntPtr bx, IntPtr tx, int x_size);
        public HSFunc GpuTile (HSVar x, HSVar bx, HSVar tx, int x_size)
        {
            AddRef(x, bx, tx);
            Func_GpuTile_VarVarVarInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(bx), HSUtil.CArg(tx), HSUtil.CArg(x_size));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarInt(IntPtr self, IntPtr x, IntPtr tx, int x_size);
        public HSFunc GpuTile (HSVar x, HSVar tx, int x_size)
        {
            AddRef(x, tx);
            Func_GpuTile_VarVarInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(tx), HSUtil.CArg(x_size));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarVarVarVarVarIntInt(IntPtr self, IntPtr x, IntPtr y, IntPtr bx, IntPtr by, IntPtr tx, IntPtr ty, int x_size, int y_size);
        public HSFunc GpuTile (HSVar x, HSVar y, HSVar bx, HSVar by, HSVar tx, HSVar ty, int x_size, int y_size)
        {
            AddRef(x, y, bx, by, tx, ty);
            Func_GpuTile_VarVarVarVarVarVarIntInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(bx), HSUtil.CArg(by), HSUtil.CArg(tx), HSUtil.CArg(ty), HSUtil.CArg(x_size), HSUtil.CArg(y_size));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarVarVarIntInt(IntPtr self, IntPtr x, IntPtr y, IntPtr tx, IntPtr ty, int x_size, int y_size);
        public HSFunc GpuTile (HSVar x, HSVar y, HSVar tx, HSVar ty, int x_size, int y_size)
        {
            AddRef(x, y, tx, ty);
            Func_GpuTile_VarVarVarVarIntInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(tx), HSUtil.CArg(ty), HSUtil.CArg(x_size), HSUtil.CArg(y_size));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarVarVarVarVarVarVarVarIntIntInt(IntPtr self, IntPtr x, IntPtr y, IntPtr z, IntPtr bx, IntPtr by, IntPtr bz, IntPtr tx, IntPtr ty, IntPtr tz, int x_size, int y_size, int z_size);
        public HSFunc GpuTile (HSVar x, HSVar y, HSVar z, HSVar bx, HSVar by, HSVar bz, HSVar tx, HSVar ty, HSVar tz, int x_size, int y_size, int z_size)
        {
            AddRef(x, y, z, bx, by, bz, tx, ty, tz);
            Func_GpuTile_VarVarVarVarVarVarVarVarVarIntIntInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z), HSUtil.CArg(bx), HSUtil.CArg(by), HSUtil.CArg(bz), HSUtil.CArg(tx), HSUtil.CArg(ty), HSUtil.CArg(tz), HSUtil.CArg(x_size), HSUtil.CArg(y_size), HSUtil.CArg(z_size));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarVarVarVarVarIntIntInt(IntPtr self, IntPtr x, IntPtr y, IntPtr z, IntPtr tx, IntPtr ty, IntPtr tz, int x_size, int y_size, int z_size);
        public HSFunc GpuTile (HSVar x, HSVar y, HSVar z, HSVar tx, HSVar ty, HSVar tz, int x_size, int y_size, int z_size)
        {
            AddRef(x, y, z, tx, ty, tz);
            Func_GpuTile_VarVarVarVarVarVarIntIntInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z), HSUtil.CArg(tx), HSUtil.CArg(ty), HSUtil.CArg(tz), HSUtil.CArg(x_size), HSUtil.CArg(y_size), HSUtil.CArg(z_size));
            return this;
        }

        /*
        // In the docs, but missing from header file.
        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarInt(IntPtr self, IntPtr x, int x_size);
        public HSFunc GpuTile (HSVar x, int x_size)
        {
            Func_GpuTile_VarInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(x_size));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarIntInt(IntPtr self, IntPtr x, IntPtr y, int x_size, int y_size);
        public HSFunc GpuTile (HSVar x, HSVar y, int x_size, int y_size)
        {
            Func_GpuTile_VarVarIntInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(x_size), HSUtil.CArg(y_size));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuTile_VarVarVarIntIntInt(IntPtr self, IntPtr x, IntPtr y, IntPtr z, int x_size, int y_size, int z_size);
        public HSFunc GpuTile (HSVar x, HSVar y, HSVar z, int x_size, int y_size, int z_size)
        {
            Func_GpuTile_VarVarVarIntIntInt(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z), HSUtil.CArg(x_size), HSUtil.CArg(y_size), HSUtil.CArg(z_size));
            return this;
        }
        */

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuBlocks_Var(IntPtr self, IntPtr x);
        public HSFunc GpuBlocks(HSVar x) {
            AddRef(x);
            Func_GpuBlocks_Var(HSUtil.CArg(this), HSUtil.CArg(x));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuBlocks_VarVar(IntPtr self, IntPtr x, IntPtr y);
        public HSFunc GpuBlocks(HSVar x, HSVar y) {
            AddRef(x, y);
            Func_GpuBlocks_VarVar(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuBlocks_VarVarVar(IntPtr self, IntPtr x, IntPtr y, IntPtr z);
        public HSFunc GpuBlocks(HSVar x, HSVar y, HSVar z) {
            AddRef(x, y, z);
            Func_GpuBlocks_VarVarVar(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z));
            return this;
        }


        [DllImport(Constants.LibName)]
        private static extern void Func_GpuThreads_Var(IntPtr self, IntPtr x);
        public HSFunc GpuThreads(HSVar x) {
            AddRef(x);
            Func_GpuThreads_Var(HSUtil.CArg(this), HSUtil.CArg(x));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuThreads_VarVar(IntPtr self, IntPtr x, IntPtr y);
        public HSFunc GpuThreads(HSVar x, HSVar y) {
            AddRef(x, y);
            Func_GpuThreads_VarVar(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern void Func_GpuThreads_VarVarVar(IntPtr self, IntPtr x, IntPtr y, IntPtr z);
        public HSFunc GpuThreads(HSVar x, HSVar y, HSVar z) {
            AddRef(x, y, z);
            Func_GpuThreads_VarVarVar(HSUtil.CArg(this), HSUtil.CArg(x), HSUtil.CArg(y), HSUtil.CArg(z));
            return this;
        }

        [DllImport(Constants.LibName)]
        private static extern IntPtr Func_In_Func(IntPtr self, IntPtr f);
        public HSFunc In(HSFunc f) {
            var result = new HSFunc(Func_In_Func(HSUtil.CArg(this), HSUtil.CArg(f)));
            result.AddRef(this, f);
            return result;
        }
        
        [DllImport(Constants.LibName)]
        private static extern IntPtr Func_In(IntPtr self);
        public HSFunc In() {
            var result = new HSFunc(Func_In(HSUtil.CArg(this)));
            result.AddRef(this);
            return result;
        }
        
        [DllImport(Constants.LibName)]
        private static extern IntPtr Func_Update_Int(IntPtr self, int index);
        public HSStage Update(int index = 0) {
            var result = new HSStage(Func_Update_Int(HSUtil.CArg(this), HSUtil.CArg(index)));
            result.AddRef(this);
            
            // HSStage is a handle into a HSFunc's internals. The HSStage won't be valid if the HSFunc disappears, so
            // we add a reference to the function. However, the HSFunc *will* still be valid if the HSStage disappears,
            // since it's just a handle for scheduling, and can be reaped as soon as we've done whatever we plan to do
            // with it. Hence: we do not add a reference to the Stage to this Func.
            
            return result;
        }
    }
}
