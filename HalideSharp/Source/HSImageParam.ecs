#ecs;

using System;
using System.Runtime.InteropServices;

includeFile("Indexer.ecs");

replace(DimensionFields => (Stride, Extent));

namespace HalideSharp
{
    internal class CppImageParam
    {
        region("Constructors") {
            unroll(BufferType in BufferTypes) {
                replacePP(MethodName => concatId(ImageParamOf, BufferType, _New_Int)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(int d);
                }

                replacePP(MethodName => concatId(ImageParamOf, BufferType, _New_IntString)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(int d, [MarshalAs(Constants.StringType)] string n);
                }
            }
        }

        region("Destructors") {
            unroll(BufferType in BufferTypes) {
                replacePP(MethodName => concatId(ImageParamOf, BufferType, _Delete)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(IntPtr ip);
                }
            }
        }

        region("Setters") {
            unroll(BufferType in BufferTypes) {
                replacePP(MethodName => concatId(ImageParamOf, BufferType, _Set_, BufferOf, BufferType)) {
                    [DllImport(Constants.LibName)] public static extern void MethodName(IntPtr self, IntPtr buff);
                }
            }
        }

        region("In") {
            unroll(BufferType in BufferTypes) {
                replacePP(MethodName => concatId(ImageParamOf, BufferType, _In_, Func)) {
                    [DllImport(Constants.LibName)] public static extern IntPtr MethodName(IntPtr self, IntPtr func);
                }
            }
        }

        region("1D Indexers") {
            region("int indexers") {
                unroll(BufferType in BufferTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _GetExpr_Int)) {
                        [DllImport(Constants.LibName)] public static extern IntPtr MethodName(IntPtr obj, int x);
                    }
                }
            }
            GenIndexerImports1D(ImageParam);
        }
        region("2D Indexers") {
            region("int indexers") {
                unroll(BufferType in BufferTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _GetExpr_IntInt)) {
                        [DllImport(Constants.LibName)] public static extern IntPtr MethodName(IntPtr obj, int x, int y);
                    }
                }
            }
            GenIndexerImports2D(ImageParam);
        }

        region("3D Indexers") {
            region("int indexers") {
                unroll(BufferType in BufferTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _GetExpr_IntIntInt)) {
                        [DllImport(Constants.LibName)] public static extern IntPtr MethodName(IntPtr obj, int x, int y, int z);
                    }
                }
            }
            GenIndexerImports3D(ImageParam);
        }
        
        region("Dimension accessors") {
            define Dimension($BufferType) {
                unroll(FieldName in DimensionFields) {
                    replace(MethodName => concatId(ImageParamOf, $BufferType, _GetDimension, FieldName, _Int)) {
                        [DllImport(Constants.LibName)] internal static extern IntPtr MethodName(IntPtr obj, int d);
                    }

                    replace(MethodName => concatId(ImageParamOf, $BufferType, _SetDimension, FieldName, _IntInt)) {
                        [DllImport(Constants.LibName)] internal static extern void MethodName(IntPtr self, int d, int val);
                    }
                }
            }
            ExecMacroAllTypes(Dimension);
        }
    }

    public class HSImageParam<T> : HSObject where T: struct
    {
        private HSImageParamDimensionList<T> _dimensions;
        public HSImageParamDimensionList<T> Dim => _dimensions;

        region("Constructors") {
            public HSImageParam(int d)
            {
                _dimensions = new HSImageParamDimensionList<T>(this);
                unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _New_Int)) {
                        if(typeof(T) == typeof(NativeType)) { _cppobj = CppImageParam.MethodName(HSUtil.CArg(d)); return; }
                    }
                }
                throw new NotImplementedException($"ImageParam type {typeof(T)} unsupported");
            }

            public HSImageParam(int d, string n)
            {
                _dimensions = new HSImageParamDimensionList<T>(this);
                unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _New_IntString)) {
                        if(typeof(T) == typeof(NativeType)) { _cppobj = CppImageParam.MethodName(HSUtil.CArg(d), HSUtil.CArg(n)); return; }
                    }
                }
                throw new NotImplementedException($"ImageParam type {typeof(T)} unsupported");
            }
        }

        region("Destructor") {
            ~HSImageParam()
            {
                unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _Delete)) {
                        if(typeof(T) == typeof(NativeType)) { CppImageParam.MethodName(HSUtil.CArg(this)); return; }
                    }
                }
                throw new NotImplementedException($"ImageParam type {typeof(T)} unsupported");
            }
        }

        region("Setters") {
            public void Set(HSBuffer<T> buff) {
                unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _Set_, BufferOf, BufferType)) {
                        if(typeof(T) == typeof(NativeType)) { CppImageParam.MethodName(HSUtil.CArg(this), HSUtil.CArg(buff)); return; }
                    }
                }
                throw new NotImplementedException($"ImageParam type {typeof(T)} unsupported");
            }
        }

        region("In") {
            public HSFunc In(HSFunc f) {
                unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                    replacePP(MethodName => concatId(ImageParamOf, BufferType, _In_Func)) {
                        if(typeof(T) == typeof(NativeType)) { return new HSFunc(CppImageParam.MethodName(HSUtil.CArg(this), HSUtil.CArg(f))); }
                    }
                }
                throw new NotImplementedException($"ImageParam type {typeof(T)} unsupported");
            }
        }
            

        region("1D indexers") {
            Indexer1D(ImageParam, Int);
            define ImageParamIndexer1D($T1) {
                Indexer1D(ImageParam, $T1);
            }
            ExecMacro1D(ImageParamIndexer1D);
        }

        region("2D indexers") {
            Indexer2D(ImageParam, Int, Int);
            define ImageParamIndexer2D($T1, $T2) {
                Indexer2D(ImageParam, $T1, $T2);
            }
            ExecMacro2D(ImageParamIndexer2D);
        }

        region("3D indexers") {
            Indexer3D(ImageParam, Int, Int, Int);
            define ImageParamIndexer3D($T1, $T2, $T3) {
                Indexer3D(ImageParam, $T1, $T2, $T3);
            }
            ExecMacro3D(ImageParamIndexer3D);
        }

        region("Dimensions") {
            internal HSImageParamDimension<T> GetDimension(int d) {
                return new HSImageParamDimension<T>(this, d);
            }

            unroll(FieldName in DimensionFields) {
                replace(MethodName => concatId(GetDimension, FieldName)) {
                    internal HSExpr MethodName(int dim) {
                        unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                            replacePP(ImplName => concatId(ImageParamOf, BufferType, _GetDimension, FieldName, _Int)) {
                                if(typeof(T) == typeof(NativeType)) {
                                    return new HSExpr(CppImageParam.ImplName(HSUtil.CArg(this), HSUtil.CArg(dim)));
                                }
                            }
                        }
                        throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
                    }
                }

                replace(MethodName => concatId(SetDimension, FieldName)) {
                    internal void MethodName(int dim, int val) {
                        unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                            replacePP(ImplName => concatId(ImageParamOf, BufferType, _SetDimension, FieldName, _IntInt)) {
                                if(typeof(T) == typeof(NativeType)) {
                                    CppImageParam.ImplName(HSUtil.CArg(this), HSUtil.CArg(dim), HSUtil.CArg(val));
                                    return;
                                }
                            }
                        }
                        throw new NotImplementedException($"Buffer type {typeof(T)} unsupported");
                    }
                }
            }
        }
    }
}
