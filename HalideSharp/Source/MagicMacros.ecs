
// Ensure that the set of types here matches those listed in magicmacros.h
replace(BufferTypes => (Int, UInt, Float, Short, UShort, SByte, Byte));
replace(BufferAndNativeTypes => (
    (Int, int),
    (UInt, uint),
    (Float, float),
    (Short, short),
    (UShort, ushort),
    (SByte, sbyte),
    (Byte, byte)));

// Execute the given macro with all variations of containing types specified.
define ExecMacroAllTypes($macro) {
    unroll(BufferType in BufferTypes) {
        $macro(BufferType);
    }
}

// Execute the given macro with all permutations of types for 1 argument.
define ExecMacro1D($macro2d) {
    unroll (T1 in (Expr, RDom)) {
        $macro2d(T1);
    }
}

// Execute the given macro with all permutations of types for 2 arguments,
// except (int, int) -- this is reserved to allow directly reading values from
// buffers (or for other types, we define the (int, int) behavior directly so
// that it's clear what's happening.
define ExecMacro2D($macro2d) {
    unroll (T1 in (Expr, RDom)) {
        unroll(T2 in (Expr, RDom)) {
            $macro2d(T1, T2);
        }
    }
}

// Execute the given macro with all permutations of types for 3 arguments,
// except (int, int, int) -- this is reserved to allow directly reading values
// from buffers (or for other types, we define the (int, int) behavior directly
// so that it's clear what's happening.
define ExecMacro3D($macro3d) {
    unroll (T1 in (Expr, RDom)) {
        unroll(T2 in (Expr, RDom)) {
            unroll(T3 in (Expr, RDom)) {
                $macro3d(T1, T2, T3);
            }
        }
    }
}

// The folllowing two macros are a workaround for the fact that LeMP struggles
// with defining "#preprocessorDirective" directly in the code -- it will emit
// it sometimes but not others. A "proper" fix for this seems to be elusive, so
// we're just going to go ahead and write a macro to emit them directly and use
// that instead.
define region($name, { $(..code); }) {
    #rawText("\n");
    #rawText("#region "); #rawText($name);
    $(..code);
    #rawText("#endregion // "); #rawText($name);
    #rawText("\n");
}

define ifdef($name, { $(..code); }) {
    #rawText("\n");
    #rawText("#if "); #rawText($name);
    $(..code);
    #rawText("#endif // "); #rawText($name);
    #rawText("\n");
}
