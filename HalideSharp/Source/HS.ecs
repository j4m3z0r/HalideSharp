#ecs;

includeFile("MagicMacros.ecs");

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace HalideSharp
{
    public class HS
    {
        unroll (num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) {
            replace(CName => concatId(Global_Var, num),
                    VarName => concatId(_, num)) {
                [DllImport(Constants.LibName)]
                private static extern IntPtr CName();
                public static readonly HSVar VarName = new HSVar(CName(), true);
            }
        }

        unroll (BufferType in BufferTypes) {
            replacePP(MethodName => concatId(Global_CastTo, BufferType)) {
                [DllImport(Constants.LibName)] private static extern IntPtr MethodName(IntPtr expr);
            }
        }
        
        public static HSExpr Cast<T>(HSExpr expr)
        {
            unroll((BufferType, NativeType) in BufferAndNativeTypes) {
                replacePP(MethodName => concatId(Global_CastTo, BufferType)) {
                    if(typeof(T) == typeof(NativeType)) {
                        var result = new HSExpr(MethodName(HSUtil.CArg(expr)));
                        result.AddRef(expr);
                        return result;
                    }
                }
            }
            throw new NotImplementedException($"Casting not implemented for type {typeof(T)}");
        }

        [DllImport(Constants.LibName, EntryPoint = "print_objects_when")]
        private static extern IntPtr PrintObjectsWhen(IntPtr condition, int numObjects, HSObjectType[] objTypes, IntPtr[] objects);
        
        public static HSExpr PrintWhen(HSExpr when, params object[] args)
        {
            // Construct a pair of parallel arrays representing the argument list: one for denoting the types of the
            // arguments, the other for pointers to the arguments themselves.
            var typeList = new HSObjectType[args.Length];
            var objList = new IntPtr[args.Length];
            var garbage = new List<GCHandle>();

            try
            {
                for (var i = 0; i < args.Length; i++)
                {
                    var a = args[i];
                    if (a is string)
                    {
                        // Convert to null-terminated UTF8 string. FIXME: get the encoding from the Constants class.
                        var bytes = Encoding.UTF8.GetBytes((a as string) + '\0');
                        var handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);
                        garbage.Add(handle);

                        typeList[i] = HSObjectType.HS_String;
                        objList[i] = handle.AddrOfPinnedObject();
                    }
                    else if (a is HSVar)
                    {
                        typeList[i] = HSObjectType.HS_Var;
                        objList[i] = HSUtil.CArg(a as HSVar);
                    }
                    else if (a is HSExpr)
                    {
                        typeList[i] = HSObjectType.HS_Expr;
                        objList[i] = HSUtil.CArg(a as HSExpr);
                    }
                    else
                    {
                        throw new NotImplementedException($"Cannot print objects {a} at index {i}");
                    }
                }

                HSExpr result = null;
                if (ReferenceEquals(when, null))
                {
                    result = new HSExpr(PrintObjectsWhen(IntPtr.Zero, args.Length, typeList, objList));
                }
                else
                {
                    result = new HSExpr(PrintObjectsWhen(HSUtil.CArg(when), args.Length, typeList, objList));
                }

                foreach(var a in args) {
                    if(a as HSObject != null) {
                        result.AddRef(a as HSObject);
                    }
                }

                return result;

            }
            finally
            {
                foreach (var h in garbage)
                {
                    h.Free();
                }
            }
        }

        public static HSExpr Print(params object[] args)
        {
            return PrintWhen(null, args);
        }

		[DllImport(Constants.LibName)] private static extern IntPtr Global_Clamp_ExprExprExpr(IntPtr e, IntPtr min, IntPtr max);
		public static HSExpr Clamp(HSExpr e, HSExpr min, HSExpr max)
		{
    		var cppobj = Global_Clamp_ExprExprExpr(HSUtil.CArg(e), HSUtil.CArg(min), HSUtil.CArg(max));
			var result = new HSExpr(cppobj);
            result.AddRef(e);
            result.AddRef(min);
            result.AddRef(max);
            return result;
		}

        [DllImport(Constants.LibName)]
        private static extern IntPtr Global_GetHostTarget();

        public static HSTarget GetHostTarget()
        {
            return new HSTarget(Global_GetHostTarget());
        }

        [DllImport(Constants.LibName)]
        private static extern IntPtr Global_Select_ExprExprExpr(IntPtr condition, IntPtr trueVal, IntPtr falseVal);
        public static HSExpr Select(HSExpr condition, HSExpr trueVal, HSExpr falseVal)
        {
            var result = new HSExpr(Global_Select_ExprExprExpr(HSUtil.CArg(condition), HSUtil.CArg(trueVal), HSUtil.CArg(falseVal)));
            result.AddRef(condition, trueVal, falseVal);
            return result;
        }

        [DllImport(Constants.LibName)]
        private static extern IntPtr Global_Select_ExprExprExprExprVarargs(IntPtr c0, IntPtr v0, IntPtr c1, IntPtr v1, int numArgs, IntPtr[] args);
        public static HSExpr Select(HSExpr c0, HSExpr v0, HSExpr c1, HSExpr v1, params HSExpr[] args)
        {
            if(args.Length > 10 || args.Length < 1 || args.Length % 2 != 1)
            {
                throw new NotImplementedException("Only 1, 3, 5, 7 or 9 varargs are supported.");
            }

            var objList = new IntPtr[args.Length];
            for (var i = 0; i < args.Length; i++)
            {
                objList[i] = HSUtil.CArg(args[i]);
            }

            var result = new HSExpr(Global_Select_ExprExprExprExprVarargs(
                HSUtil.CArg(c0), HSUtil.CArg(v0),
                HSUtil.CArg(c1), HSUtil.CArg(v1),
                args.Length, objList));

            result.AddRef(c0, v0, c1, v1);
            foreach(var a in args) {
                result.AddRef(a);
            }

            return result;
        }
    }
}
