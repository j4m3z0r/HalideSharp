#ecs;

includeFile("MagicMacros.ecs");

using System;
using System.Runtime.InteropServices;
using System.Xml.Schema;

namespace HalideSharp
{
    public partial class HSVar : HSObject
    {
        public const string CppType = "Var";
        private bool _immortal;
        private readonly string Name;
        
        [DllImport(Constants.LibName)] private static extern IntPtr Var_New_String([MarshalAs(Constants.StringType)] string name);
        
        public HSVar(string name) : base()
        {
            Name = name;
            _cppobj = Var_New_String(name);
        }

        /// @immortal is a hack to prevent calling the destructor on the global _0, _1, etc variables.
        internal HSVar(IntPtr cppobj, bool immortal=false) : base()
        {
            _immortal = immortal;
            _cppobj = cppobj;
        }
        
        [DllImport(Constants.LibName)] private static extern void Var_Delete(IntPtr obj);
        
        ~HSVar() {
            ifdef("TRACE_DESTRUCTORS") {
                Console.WriteLine($"Destroying {this.GetType().Name}");
            }

            if (_cppobj != IntPtr.Zero && !_immortal)
            {
                Var_Delete(_cppobj);
            }
        }

        // HACK: returning false from both operator true and operator false should force us to never short-circuit,
        // meaning that && will always invoke operator&, which calls C++'s operator&& in the wrapper. In short, this
        // allows for the common (x && y) style conditionals.
        public static bool operator true(HSVar v)
        {
            return false;
        }

        public static bool operator false(HSVar v)
        {
            return false;
        }
    }
}
